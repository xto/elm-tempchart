Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var results = $Signal.mailbox($Result.Err("Potato"));
   var query = $Signal.mailbox("");
   var myStyle = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                      ,_0: "width"
                                                      ,_1: "100%"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "height"
                                                      ,_1: "40px"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "padding"
                                                      ,_1: "10px 0"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "font-size"
                                                      ,_1: "2em"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "text-align"
                                                      ,_1: "center"}]));
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "LoadReadings":
            return function () {
                 var potato = _U.replace([["temperatureReadings"
                                          ,A2($List.append,
                                          model.temperatureReadings,
                                          _L.fromArray([{_: {}
                                                        ,readAt: "NOW"
                                                        ,temperature: "102"
                                                        ,unit: "Kelvin"}]))]],
                 model);
                 return {ctor: "_Tuple2"
                        ,_0: potato
                        ,_1: $Effects.none};
              }();
            case "NoOp":
            return {ctor: "_Tuple2"
                   ,_0: model
                   ,_1: $Effects.none};}
         _U.badCase($moduleName,
         "between lines 30 and 47");
      }();
   });
   var LoadReadings = {ctor: "LoadReadings"};
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([A2($Html.button,
                   _L.fromArray([A2($Html$Events.onClick,
                   address,
                   LoadReadings)]),
                   _L.fromArray([$Html.text("POTATO")]))
                   ,$Html.text($Basics.toString(model.temperatureReadings))]));
   });
   var NoOp = {ctor: "NoOp"};
   var Model = function (a) {
      return {_: {}
             ,temperatureReadings: a};
   };
   var init = {ctor: "_Tuple2"
              ,_0: Model(_L.fromArray([{_: {}
                                       ,readAt: "NOW"
                                       ,temperature: "102"
                                       ,unit: "Kelvin"}]))
              ,_1: $Effects.none};
   var app = $StartApp.start({_: {}
                             ,init: init
                             ,inputs: _L.fromArray([])
                             ,update: update
                             ,view: view});
   var main = app.html;
   var TemperatureReading = F3(function (a,
   b,
   c) {
      return {_: {}
             ,readAt: b
             ,temperature: a
             ,unit: c};
   });
   var jd = function () {
      var tempobj = A4($Json$Decode.object3,
      TemperatureReading,
      A2($Json$Decode._op[":="],
      "temperature",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "readAt",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "unit",
      $Json$Decode.string));
      return A2($Json$Decode._op[":="],
      "temperatures",
      $Json$Decode.list(tempobj));
   }();
   var getUrl = function (urlString) {
      return A2($Http.get,
      jd,
      urlString);
   };
   var httpGetWrapper = function (urlString) {
      return A2($Task.mapError,
      $Basics.always("BOOM"),
      getUrl(urlString));
   };
   var getTemp = function () {
      var urlTask = $Task.succeed("http://localhost:3000/");
      return A2($Task.andThen,
      urlTask,
      httpGetWrapper);
   }();
   _elm.Main.values = {_op: _op
                      ,TemperatureReading: TemperatureReading
                      ,Model: Model
                      ,init: init
                      ,NoOp: NoOp
                      ,LoadReadings: LoadReadings
                      ,update: update
                      ,view: view
                      ,myStyle: myStyle
                      ,app: app
                      ,main: main
                      ,query: query
                      ,results: results
                      ,getTemp: getTemp
                      ,httpGetWrapper: httpGetWrapper
                      ,getUrl: getUrl
                      ,jd: jd};
   return _elm.Main.values;
};