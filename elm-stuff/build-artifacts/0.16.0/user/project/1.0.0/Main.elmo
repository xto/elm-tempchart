Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Chartjs = Elm.Chartjs.make(_elm),
   $Chartjs$Line = Elm.Chartjs.Line.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var readingsMailbox = $Signal.mailbox($Maybe.Nothing);
   var clock = $Time.every(2 * $Time.second);
   var drawChart = F2(function (horizontal_axis_data,vertical_axis_data) {
      var data = {ctor: "_Tuple2"
                 ,_0: horizontal_axis_data
                 ,_1: _U.list([{ctor: "_Tuple3",_0: "Time",_1: $Chartjs$Line.defStyle(A3($Color.rgba,220,220,220)),_2: vertical_axis_data}])};
      return A2($Html.div,_U.list([]),_U.list([$Html.fromElement(A4($Chartjs$Line.chart,800,600,data,$Chartjs$Line.defaultOptions))]));
   });
   var extractAttributes = F2(function (attributeFunction,list) {    return A2($List.map,attributeFunction,list);});
   var extractAllTimes = function (model) {    return A2(extractAttributes,function (_) {    return _.readAt;},model.temperatureReadings);};
   var extractAllTemps = function (model) {    return A2(extractAttributes,function (_) {    return _.temperature;},model.temperatureReadings);};
   var UpdateMashName = function (a) {    return {ctor: "UpdateMashName",_0: a};};
   var SetMashName = {ctor: "SetMashName"};
   var entryForm = F2(function (address,model) {
      var setMashNameButton = model.mashNamed ? A2($Html.span,_U.list([]),_U.list([$Html.text("Mash name set!")])) : A2($Html.button,
      _U.list([$Html$Attributes.$class("setName"),A2($Html$Events.onClick,address,SetMashName)]),
      _U.list([$Html.text("Set Mash Name")]));
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.input,
              _U.list([$Html$Attributes.type$("text")
                      ,$Html$Attributes.placeholder("Enter Mash Name")
                      ,$Html$Attributes.value(model.mashName)
                      ,$Html$Attributes.name("phrase")
                      ,$Html$Attributes.autofocus(true)
                      ,$Html$Attributes.disabled(model.mashNamed)
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (v) {    return A2($Signal.message,address,UpdateMashName(v));})]),
              _U.list([]))
              ,setMashNameButton]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container")]),
      _U.list([A2(entryForm,address,model),A2(drawChart,extractAllTimes(model),extractAllTemps(model))]));
   });
   var RequestReadingsOnTime = function (a) {    return {ctor: "RequestReadingsOnTime",_0: a};};
   var RequestReadings = {ctor: "RequestReadings"};
   var LoadReadings = function (a) {    return {ctor: "LoadReadings",_0: a};};
   var Model = F3(function (a,b,c) {    return {temperatureReadings: a,mashName: b,mashNamed: c};});
   var TemperatureReading = F3(function (a,b,c) {    return {temperature: a,readAt: b,unit: c};});
   var jd = function () {
      var tempobj = A4($Json$Decode.object3,
      TemperatureReading,
      A2($Json$Decode._op[":="],"temperature",$Json$Decode.$float),
      A2($Json$Decode._op[":="],"readAt",$Json$Decode.string),
      A2($Json$Decode._op[":="],"unit",$Json$Decode.string));
      return A2($Json$Decode._op[":="],"temperatures",$Json$Decode.list(tempobj));
   }();
   var getTempFromApiTask = $Task.toMaybe(A2($Http.get,jd,A2($Http.url,"http://localhost:3000/temperatures",_U.list([]))));
   var getTempAction = $Effects.task(A2($Task.map,LoadReadings,getTempFromApiTask));
   var init = {ctor: "_Tuple2",_0: A3(Model,_U.list([]),"",false),_1: getTempAction};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "RequestReadings": return {ctor: "_Tuple2",_0: model,_1: getTempAction};
         case "LoadReadings": var _p2 = _p0._0;
           var eval_readings = A2($Maybe.withDefault,_U.list([]),_p2);
           var _p1 = _p2;
           if (_p1.ctor === "Nothing") {
                 return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
              } else {
                 return {ctor: "_Tuple2"
                        ,_0: A3(Model,A2($List.append,model.temperatureReadings,eval_readings),model.mashName,model.mashNamed)
                        ,_1: $Effects.none};
              }
         case "RequestReadingsOnTime": return {ctor: "_Tuple2",_0: model,_1: _p0._0};
         case "SetMashName": return {ctor: "_Tuple2",_0: A3(Model,model.temperatureReadings,model.mashName,true),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: A3(Model,model.temperatureReadings,_p0._0,model.mashNamed),_1: $Effects.none};}
   });
   var app = $StartApp.start({init: init,update: update,view: view,inputs: _U.list([A2($Signal.map,LoadReadings,readingsMailbox.signal)])});
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   var main = app.html;
   var getTempTask = function (t) {
      return A2($Task.andThen,getTempFromApiTask,function (maybeTempReadings) {    return A2($Signal.send,readingsMailbox.address,maybeTempReadings);});
   };
   var periodicGet = Elm.Native.Task.make(_elm).performSignal("periodicGet",A2($Signal.map,getTempTask,clock));
   return _elm.Main.values = {_op: _op
                             ,TemperatureReading: TemperatureReading
                             ,Model: Model
                             ,init: init
                             ,LoadReadings: LoadReadings
                             ,RequestReadings: RequestReadings
                             ,RequestReadingsOnTime: RequestReadingsOnTime
                             ,SetMashName: SetMashName
                             ,UpdateMashName: UpdateMashName
                             ,update: update
                             ,view: view
                             ,extractAttributes: extractAttributes
                             ,extractAllTimes: extractAllTimes
                             ,extractAllTemps: extractAllTemps
                             ,drawChart: drawChart
                             ,entryForm: entryForm
                             ,getTempAction: getTempAction
                             ,getTempFromApiTask: getTempFromApiTask
                             ,jd: jd
                             ,clock: clock
                             ,getTempTask: getTempTask
                             ,readingsMailbox: readingsMailbox
                             ,app: app
                             ,main: main};
};