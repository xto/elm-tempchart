Elm.ElmTempchart = Elm.ElmTempchart || {};
Elm.ElmTempchart.make = function (_elm) {
   "use strict";
   _elm.ElmTempchart = _elm.ElmTempchart || {};
   if (_elm.ElmTempchart.values)
   return _elm.ElmTempchart.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "ElmTempchart",
   $Basics = Elm.Basics.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var myStyle = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                      ,_0: "width"
                                                      ,_1: "100%"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "height"
                                                      ,_1: "40px"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "padding"
                                                      ,_1: "10px 0"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "font-size"
                                                      ,_1: "2em"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "text-align"
                                                      ,_1: "center"}]));
   var LoadReadings = function (a) {
      return {ctor: "LoadReadings"
             ,_0: a};
   };
   var RequestReadings = {ctor: "RequestReadings"};
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([A2($Html.button,
                   _L.fromArray([A2($Html$Events.onClick,
                   address,
                   RequestReadings)]),
                   _L.fromArray([$Html.text("POTATO")]))
                   ,A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text($Basics.toString(model.temperatureReadings))]))]));
   });
   var Model = function (a) {
      return {_: {}
             ,temperatureReadings: a};
   };
   var TemperatureReading = F3(function (a,
   b,
   c) {
      return {_: {}
             ,readAt: b
             ,temperature: a
             ,unit: c};
   });
   var jd = function () {
      var tempobj = A4($Json$Decode.object3,
      TemperatureReading,
      A2($Json$Decode._op[":="],
      "temperature",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "readAt",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "unit",
      $Json$Decode.string));
      return A2($Json$Decode._op[":="],
      "temperatures",
      $Json$Decode.list(tempobj));
   }();
   var getTemp = $Effects.task($Task.map(LoadReadings)($Task.toMaybe(A2($Http.get,
   jd,
   A2($Http.url,
   "http://localhost:3000/",
   _L.fromArray([{ctor: "_Tuple2"
                 ,_0: "Potato"
                 ,_1: "Chip"}]))))));
   var init = function (some_String) {
      return {ctor: "_Tuple2"
             ,_0: Model(_L.fromArray([{_: {}
                                      ,readAt: some_String
                                      ,temperature: some_String
                                      ,unit: some_String}]))
             ,_1: getTemp};
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "LoadReadings":
            return function () {
                 var eval_readings = A2($Maybe.withDefault,
                 _L.fromArray([]),
                 action._0);
                 return {ctor: "_Tuple2"
                        ,_0: Model(A2($List.append,
                        model.temperatureReadings,
                        eval_readings))
                        ,_1: $Effects.none};
              }();
            case "RequestReadings":
            return {ctor: "_Tuple2"
                   ,_0: model
                   ,_1: getTemp};}
         _U.badCase($moduleName,
         "between lines 35 and 47");
      }();
   });
   var app = $StartApp.start({_: {}
                             ,init: init("funny cats")
                             ,inputs: _L.fromArray([])
                             ,update: update
                             ,view: view});
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",
   app.tasks);
   var main = app.html;
   var getUrl = function (urlString) {
      return A2($Http.get,
      jd,
      urlString);
   };
   _elm.ElmTempchart.values = {_op: _op
                              ,TemperatureReading: TemperatureReading
                              ,Model: Model
                              ,init: init
                              ,RequestReadings: RequestReadings
                              ,LoadReadings: LoadReadings
                              ,update: update
                              ,view: view
                              ,myStyle: myStyle
                              ,getTemp: getTemp
                              ,getUrl: getUrl
                              ,jd: jd
                              ,app: app
                              ,main: main};
   return _elm.ElmTempchart.values;
};